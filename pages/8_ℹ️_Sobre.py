import streamlit as st
from utils.st_utils import st_check_session

                        
st.set_page_config(
    page_title="Sobre o Sistema",
    layout="centered",                                                      
    page_icon="üöÄ"
)

                                                                
st_check_session()

                  
st.markdown("# üöÄ Sobre Este Sistema: Arquitetura e Prop√≥sito")
st.markdown("---")

                                
st.info("""
    **Sistema de Demonstra√ß√£o - Vers√£o 2.0 (Streamlit)**

    Esta aplica√ß√£o representa a moderniza√ß√£o de um sistema originalmente constru√≠do
    com Tkinter/ttkbootstrap. O objetivo principal foi migrar para uma interface
    web interativa e acess√≠vel usando **Streamlit**, sem sacrificar a robustez
    do back-end.
""")

                      
st.subheader("üèóÔ∏è Arquitetura Preservada e Aprimorada")
st.markdown("""
    A l√≥gica de neg√≥cios e o acesso aos dados foram cuidadosamente mantidos e
    organizados em camadas distintas, promovendo:
    * **Manutenibilidade:** C√≥digo mais f√°cil de entender e modificar.
    * **Testabilidade:** Componentes isolados facilitam testes unit√°rios.
    * **Flexibilidade:** Adapta√ß√£o a novas regras de neg√≥cio ou fontes de dados.

    **Componentes Chave do Back-end:**
    * **Camada de Persist√™ncia (`persistencia/`):**
        * Utiliza `SQLAlchemy Core` para comunica√ß√£o eficiente e padronizada com o banco de dados.
        * Inclui um **Reposit√≥rio Gen√©rico** (`repository.py`) que abstrai as opera√ß√µes CRUD (Criar, Ler, Atualizar, Deletar), tornando os controladores independentes dos detalhes do SQL.
        * Gerencia a conex√£o (`database.py`) de forma centralizada, lendo a configura√ß√£o ativa do `banco.ini`.
        * Implementa seguran√ßa (`security.py`, `auth.py`) com criptografia para credenciais no `.ini` e hashing `bcrypt` para senhas de usu√°rio no banco.
    * **Camada de Servi√ßo (`persistencia/data_service.py`):**
        * Orquestra opera√ß√µes que envolvem m√∫ltiplas tabelas ou l√≥gicas complexas (ex: reclassificar vegetal e registrar no log de auditoria).
        * Garante a **atomicidade** das transa√ß√µes (ou tudo funciona, ou nada √© alterado), mantendo a integridade dos dados.
    * **Compatibilidade Multi-Banco:**
        * Gra√ßas √† padroniza√ß√£o recente (nomes de tabelas/colunas em min√∫sculas e SQL mais gen√©rico), o sistema agora suporta nativamente **SQLite, PostgreSQL, MySQL/MariaDB e SQL Server**, bastando configurar o `banco.ini`.
""")

                                
st.subheader("üñ•Ô∏è Interface com Streamlit")
st.markdown("""
    A interface foi redesenhada utilizando os componentes nativos do Streamlit:
    * A estrutura de m√∫ltiplos pain√©is foi substitu√≠da pelo sistema de `pages/` do Streamlit, proporcionando uma navega√ß√£o fluida pela **barra lateral esquerda**.
    * Cada arquivo na pasta `pages/` corresponde a uma funcionalidade do sistema.
    * A interatividade √© gerenciada pelo ciclo de execu√ß√£o do Streamlit, com o estado sendo mantido atrav√©s do `st.session_state`.
""")

st.markdown("---")
st.caption("Desenvolvido como demonstra√ß√£o de arquitetura de software e migra√ß√£o de UI.")