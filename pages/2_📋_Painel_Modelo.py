import streamlit as st
import sys
import os
from utils.st_utils import st_check_session, check_access

# =============================================================================
# 1. CONFIGURA√á√ÉO DA P√ÅGINA E VERIFICA√á√ÉO DE ACESSO
# =============================================================================

st.set_page_config(page_title="Painel Modelo", layout="wide")

# Verifica se o usu√°rio est√° logado e se tem permiss√£o
st_check_session()
check_access([])  # Lista vazia significa que todos os logados podem ver


# =============================================================================
# 2. INICIALIZA√á√ÉO DO ESTADO DA P√ÅGINA (st.session_state)
# =============================================================================

# (Esta p√°gina √© simples e n√£o precisa de estado,
# mas aqui √© onde voc√™ colocaria:)
#
# if "variavel_exemplo" not in st.session_state:
#     st.session_state.variavel_exemplo = "Valor Padr√£o"

# =============================================================================
# 3. FUN√á√ïES DE ACESSO AO BANCO DE DADOS (L√≥gica "Repository")
# =============================================================================

# (Esta p√°gina n√£o acessa o banco,
# mas aqui √© onde voc√™ colocaria suas fun√ß√µes de CRUD:)
#
# def get_all_items():
#     return GenericRepository.read_table_to_dataframe('nome_tabela')
#
# def add_item(nome):
#     df = pd.DataFrame([{'nome': nome}])
#     GenericRepository.write_dataframe_to_table(df, 'nome_tabela')

# =============================================================================
# 4. FUN√á√ïES DE L√ìGICA DE UI (L√≥gica "Controller" / Callbacks)
# =============================================================================

def handle_test_interaction():
    """
    Fun√ß√£o chamada quando o bot√£o "Testar Intera√ß√£o" √© clicado.
    (Esta l√≥gica veio do antigo 'painel_modelo_controller.py')
    """
    try:
        usuario_atual = st.session_state.user_info
        st.success(f"Ol√°, {usuario_atual['name']}! A interatividade est√° funcionando corretamente.")
        st.balloons()
    except Exception as e:
        st.error(f"Erro ao testar intera√ß√£o: {e}")


# =============================================================================
# 5. FUN√á√ïES DE RENDERIZA√á√ÉO DA INTERFACE (L√≥gica "View")
# =============================================================================

def render_main_panel():
    """
    Desenha os componentes visuais da p√°gina na tela.
    (Esta l√≥gica veio do antigo 'painel_modelo_view.py' e foi atualizada)
    """
    st.title("üìã Estrutura de um Novo Painel (M√©todo Simplificado)")

    with st.container(border=True):
        st.subheader("Guia R√°pido (Estrutura de Arquivo √önico)")
        st.markdown("""
        Este painel serve como um **ponto de partida** para novas telas no padr√£o simplificado.
        Para criar uma nova funcionalidade (como Gatos ou Usu√°rios), basta copiar este arquivo.

        **Passos para criar uma nova p√°gina de CRUD:**

        1.  **Copie este Arquivo:** Copie `2_üìã_Painel_Modelo.py` para um novo arquivo em `pages/`
            (ex: `pages/4_üì¶_Meus_Itens.py`).

        2.  **Se√ß√£o 1: Configura√ß√£o:** Ajuste o `st.set_page_config` e as permiss√µes em `check_access`.

        3.  **Se√ß√£o 2: Estado:** Adicione as vari√°veis do `st.session_state` que voc√™ precisa
            (ex: `show_form` e `editing_item`).

        4.  **Se√ß√£o 3: L√≥gica de BD:** Crie suas fun√ß√µes de CRUD (ex: `get_all_items`, `add_item`,
            `update_item`, `delete_item`) usando o `GenericRepository`.

        5.  **Se√ß√£o 4: L√≥gica de UI (Callbacks):** Crie as fun√ß√µes que os bot√µes ir√£o chamar
            (ex: `handle_save`, `handle_delete`, `show_add_form`, `close_form_and_rerun`).

        6.  **Se√ß√£o 5: Renderiza√ß√£o (View):** Crie as fun√ß√µes que desenham a interface
            (ex: `render_form` e `render_table`).

        7.  **Se√ß√£o 6: Execu√ß√£o Principal:** Adapte o c√≥digo no final do arquivo para
            chamar suas fun√ß√µes de renderiza√ß√£o na ordem correta.
        """)
        st.divider()

        # O 'on_click' agora chama nossa fun√ß√£o local 'handle_test_interaction'
        st.button(
            "Testar Intera√ß√£o",
            type="primary",
            on_click=handle_test_interaction
        )


# =============================================================================
# 6. EXECU√á√ÉO PRINCIPAL DA P√ÅGINA
# (Este √© o "c√©rebro" que decide o que mostrar e quando)
# =============================================================================

# Simplesmente chamamos nossa fun√ß√£o principal de renderiza√ß√£o
render_main_panel()