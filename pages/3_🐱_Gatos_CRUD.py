import streamlit as st
import pandas as pd
import config  # Para verificar se o BD est√° ativo
from persistencia.repository import GenericRepository  # Para acesso ao BD
from utils.st_utils import st_check_session, check_access  # Para seguran√ßa

# =============================================================================
# 1. CONFIGURA√á√ÉO DA P√ÅGINA E VERIFICA√á√ÉO DE ACESSO
# (Isso veio do seu arquivo 3_üê±_Gatos_CRUD.py)
# =============================================================================

st.set_page_config(page_title="Gerenciador de Gatos", layout="wide")

# Verifica se o usu√°rio est√° logado e se tem permiss√£o
st_check_session()
check_access([])  # Lista vazia significa que todos os logados podem ver

# Verifica se o banco de dados est√° habilitado no config.py
if not config.DATABASE_ENABLED:
    st.title("üê± Gerenciador de Esp√©cies de Gatos")
    st.warning("Funcionalidade indispon√≠vel: O banco de dados est√° desabilitado no arquivo de configura√ß√£o.")
    st.stop()  # Para a execu√ß√£o da p√°gina aqui

# =============================================================================
# 2. INICIALIZA√á√ÉO DO ESTADO DA P√ÅGINA (st.session_state)
# (Isso veio do seu 'gatos_controller.py' -> _initialize_state)
#
# O 'st.session_state' √© a "mem√≥ria" da p√°gina. √â aqui que guardamos
# informa√ß√µes importantes, como "o formul√°rio est√° vis√≠vel?" ou
# "qual item estamos editando?".
# =============================================================================

# Inicializa o estado para controlar a visibilidade do formul√°rio
if "show_form" not in st.session_state:
    st.session_state.show_form = False

# Inicializa o estado para guardar os dados do item em edi√ß√£o
if "editing_item" not in st.session_state:
    st.session_state.editing_item = None

# =============================================================================
# 3. FUN√á√ïES DE ACESSO AO BANCO DE DADOS (L√≥gica "Repository")
# (Estas fun√ß√µes substituem as chamadas diretas ao GenericRepository)
#
# Criamos fun√ß√µes "wrapper" simples para cada opera√ß√£o de CRUD.
# Isso torna o resto do c√≥digo mais leg√≠vel e f√°cil de replicar.
# Para outra tabela, voc√™ s√≥ precisaria copiar e alterar estas fun√ß√µes.
# =============================================================================

def get_all_gatos():
    """Busca todas as esp√©cies de gatos no banco de dados."""
    try:
        df = GenericRepository.read_table_to_dataframe('especie_gatos')
        return df
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel carregar as esp√©cies. Detalhe: {e}")
        return pd.DataFrame()

def add_gato(nome, origem, temperamento):
    """Adiciona uma nova esp√©cie de gato ao banco de dados."""
    df = pd.DataFrame([{'nome_especie': nome.strip(),
                        'pais_origem': origem.strip(),
                        'temperamento': temperamento.strip()}])
    GenericRepository.write_dataframe_to_table(df, 'especie_gatos')

def update_gato(item_id, nome, origem, temperamento):
    """Atualiza uma esp√©cie de gato existente no banco de dados."""
    update_values = {'nome_especie': nome.strip(),
                     'pais_origem': origem.strip(),
                     'temperamento': temperamento.strip()}
    where_conditions = {'id': int(item_id)}
    GenericRepository.update_table('especie_gatos', update_values, where_conditions)

def delete_gato(item_id):
    """Exclui uma esp√©cie de gato do banco de dados."""
    where_conditions = {'id': int(item_id)}
    GenericRepository.delete_from_table('especie_gatos', where_conditions)

# =============================================================================
# 4. FUN√á√ïES DE L√ìGICA DE UI (L√≥gica "Controller")
# (Estas s√£o as fun√ß√µes que os bot√µes ir√£o chamar - 'callbacks')
#
# Elas controlam o "estado" da p√°gina, como abrir ou fechar o formul√°rio
# e processar os dados salvos.
# =============================================================================

def show_add_form():
    """Ativa o modo "Adicionar", mostrando o formul√°rio vazio."""
    st.session_state.show_form = True
    st.session_state.editing_item = None

def show_edit_form(item_data):
    """Ativa o modo "Editar", mostrando o formul√°rio preenchido."""
    st.session_state.show_form = True
    st.session_state.editing_item = item_data

def close_form_and_rerun():
    """Fecha o formul√°rio e recarrega a p√°gina."""
    st.session_state.show_form = False
    st.session_state.editing_item = None
    st.rerun()

def handle_save(nome, origem, temperamento):
    """Processa o clique no bot√£o 'Salvar' do formul√°rio."""
    if not nome.strip():
        st.error("O nome da esp√©cie √© obrigat√≥rio.")
        return  # Para a execu√ß√£o aqui e mant√©m o formul√°rio aberto

    try:
        if st.session_state.editing_item:
            # MODO EDI√á√ÉO: Atualiza o item existente
            item_id = st.session_state.editing_item['id']
            update_gato(item_id, nome, origem, temperamento)
            st.toast(f"'{nome}' atualizado com sucesso!", icon="‚úÖ")
        else:
            # MODO ADI√á√ÉO: Cria um novo item
            add_gato(nome, origem, temperamento)
            st.toast(f"'{nome}' cadastrado com sucesso!", icon="üéâ")

        # Se salvou com sucesso, fecha o formul√°rio e recarrega a p√°gina
        close_form_and_rerun()

    except Exception as e:
        st.error(f"Erro ao salvar: {e}")

def handle_delete(item_data):
    """Processa o clique no bot√£o 'Confirmar Exclus√£o'."""
    try:
        delete_gato(item_data['id'])
        st.toast(f"'{item_data['nome_especie']}' exclu√≠do!", icon="üóëÔ∏è")
        st.rerun()  # Recarrega a p√°gina para remover o item da lista
    except Exception as e:
        st.error(f"Erro ao excluir: {e}")

# =============================================================================
# 5. FUN√á√ïES DE RENDERIZA√á√ÉO DA INTERFACE (L√≥gica "View")
# (Estas fun√ß√µes desenham os widgets do Streamlit na tela)
# =============================================================================

def render_form():
    """Desenha o formul√°rio de Adicionar/Editar."""
    is_edit_mode = st.session_state.editing_item is not None
    title = "‚úèÔ∏è Editando Esp√©cie" if is_edit_mode else "‚ûï Adicionar Nova Esp√©cie"
    item = st.session_state.editing_item or {}

    with st.container(border=True):
        st.subheader(title)
        with st.form(key="cat_form"):
            # Campos do formul√°rio
            nome = st.text_input("Nome da Esp√©cie", value=item.get("nome_especie", ""))
            origem = st.text_input("Pa√≠s de Origem", value=item.get("pais_origem", ""))
            temperamento = st.text_area("Temperamento", value=item.get("temperamento", ""))

            # Bot√µes do formul√°rio
            form_cols = st.columns(2)
            submitted = form_cols[0].form_submit_button("Salvar", type="primary", width='stretch')
            cancelled = form_cols[1].form_submit_button("Cancelar", width='stretch')

            if submitted:
                # Chama a fun√ß√£o de l√≥gica "handle_save"
                handle_save(nome, origem, temperamento)
            if cancelled:
                # Fecha o formul√°rio e recarrega
                close_form_and_rerun()

def render_table():
    """Desenha a tabela com os dados e os bot√µes de a√ß√£o."""
    st.divider()
    df_gatos = get_all_gatos()

    if df_gatos.empty and not st.session_state.show_form:
        st.info("Nenhuma esp√©cie cadastrada. Clique em 'Adicionar' para come√ßar.")
        return

    # Cabe√ßalho da tabela
    header_cols = st.columns([3, 2, 3, 1, 1])
    header_cols[0].markdown("**Nome da Esp√©cie**")
    header_cols[1].markdown("**Pa√≠s de Origem**")
    header_cols[2].markdown("**Temperamento**")
    header_cols[3].markdown("**A√ß√µes**", help="Editar / Excluir")

    # Linhas da tabela
    for index, row in df_gatos.iterrows():
        row_data = row.to_dict()
        row_cols = st.columns([3, 2, 3, 1, 1])

        row_cols[0].write(row_data['nome_especie'])
        row_cols[1].write(row_data['pais_origem'])
        row_cols[2].write(row_data['temperamento'])

        # Bot√£o Editar
        row_cols[3].button(
            "‚úèÔ∏è",
            key=f"edit_{row_data['id']}",
            on_click=show_edit_form,  # Chama a fun√ß√£o de l√≥gica
            args=(row_data,)
        )

        # Bot√£o Excluir (com pop-up de confirma√ß√£o)
        popover = row_cols[4].popover("üóëÔ∏è")
        popover.warning(f"Excluir '{row_data['nome_especie']}'?")
        popover.button(
            "Confirmar Exclus√£o",
            key=f"del_{row_data['id']}",
            on_click=handle_delete,  # Chama a fun√ß√£o de l√≥gica
            args=(row_data,)
        )

# =============================================================================
# 6. EXECU√á√ÉO PRINCIPAL DA P√ÅGINA
# (Este √© o "c√©rebro" que decide o que mostrar)
# (Este √© o "c√©rebro" que decide o que mostrar)
# =============================================================================

st.title("üê± Gerenciador de Esp√©cies de Gatos")
st.markdown("Use a tabela abaixo para visualizar, editar ou excluir esp√©cies.")

# L√≥gica principal: ou mostra o formul√°rio, ou mostra o bot√£o "Adicionar"
if st.session_state.show_form:
    render_form()
else:
    st.button(
        "‚ûï Adicionar Nova Esp√©cie",
        on_click=show_add_form,  # Chama a fun√ß√£o de l√≥gica
        type="primary"
    )

# A tabela √© sempre renderizada
render_table()