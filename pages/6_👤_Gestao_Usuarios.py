import streamlit as st
import pandas as pd
import config  # Para verificar se o BD est√° ativo
from persistencia.repository import GenericRepository  # Para acesso ao BD
from persistencia.auth import hash_password  # Para criptografar senhas
from utils.st_utils import st_check_session, check_access  # Para seguran√ßa

# =============================================================================
# 1. CONFIGURA√á√ÉO DA P√ÅGINA E VERIFICA√á√ÉO DE ACESSO
# (Isso veio do seu arquivo 6_üë§_Gestao_Usuarios.py)
# =============================================================================

st.set_page_config(page_title="Gest√£o de Usu√°rios", layout="wide")

# Verifica se o usu√°rio est√° logado e se tem permiss√£o
st_check_session()
check_access(['Administrador Global', 'Gerente de TI'])

# Verifica se o banco de dados est√° habilitado no config.py
if not config.DATABASE_ENABLED:
    st.title("üë§ Gest√£o de Usu√°rios")
    st.warning("Funcionalidade indispon√≠vel: O banco de dados est√° desabilitado.")
    st.stop()  # Para a execu√ß√£o da p√°gina aqui

# Constante com os perfis de acesso (veio de usuarios_view.py)
PERFIS_DE_ACESSO = [
    'Administrador Global',
    'Diretor de Opera√ß√µes',
    'Gerente de TI',
    'Supervisor de Produ√ß√£o',
    'Operador de Linha',
    'Analista de Dados',
    'Auditor Externo'
]

# =============================================================================
# 2. INICIALIZA√á√ÉO DO ESTADO DA P√ÅGINA (st.session_state)
# (Isso veio do seu 'usuarios_controller.py' -> _initialize_state)
#
# O 'st.session_state' √© a "mem√≥ria" da p√°gina.
# =============================================================================

# Inicializa o estado para controlar a visibilidade do formul√°rio
if "show_user_form" not in st.session_state:
    st.session_state.show_user_form = False

# Inicializa o estado para guardar os dados do usu√°rio em edi√ß√£o
if "editing_user_item" not in st.session_state:
    st.session_state.editing_user_item = None

# =============================================================================
# 3. FUN√á√ïES DE ACESSO AO BANCO DE DADOS (L√≥gica "Repository")
# (Estas fun√ß√µes simplificam as chamadas ao GenericRepository)
# =============================================================================

def get_all_users():
    """Busca todos os usu√°rios no banco, removendo a senha."""
    try:
        df = GenericRepository.read_table_to_dataframe("usuarios")
        # Remove a coluna da senha por seguran√ßa antes de exibir
        if 'senha_criptografada' in df.columns:
            df = df.drop(columns=['senha_criptografada'])
        return df
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel carregar os usu√°rios. Detalhe: {e}")
        return pd.DataFrame()

def add_user(login, nome, tipo_acesso, password):
    """Adiciona um novo usu√°rio ao banco de dados."""
    hashed_pw = hash_password(password)
    df = pd.DataFrame([{
        'login_usuario': login,
        'senha_criptografada': hashed_pw,
        'nome_completo': nome,
        'tipo_acesso': tipo_acesso
    }])
    GenericRepository.write_dataframe_to_table(df, "usuarios")

def update_user(login, nome, tipo_acesso, password):
    """Atualiza um usu√°rio existente no banco de dados."""
    update_values = {
        'nome_completo': nome,
        'tipo_acesso': tipo_acesso
    }
    # S√≥ atualiza a senha se uma nova for fornecida
    if password:
        hashed_pw = hash_password(password)
        update_values['senha_criptografada'] = hashed_pw

    where_conditions = {'login_usuario': login}
    GenericRepository.update_table("usuarios", update_values, where_conditions)

def delete_user(login):
    """Exclui um usu√°rio do banco de dados."""
    where_conditions = {'login_usuario': login}
    GenericRepository.delete_from_table("usuarios", where_conditions)

# =============================================================================
# 4. FUN√á√ïES DE L√ìGICA DE UI (L√≥gica "Controller")
# (Estas s√£o as fun√ß√µes que os bot√µes ir√£o chamar - 'callbacks')
# =============================================================================

def show_add_form():
    """Ativa o modo "Adicionar", mostrando o formul√°rio vazio."""
    st.session_state.show_user_form = True
    st.session_state.editing_user_item = None

def show_edit_form(item_data):
    """Ativa o modo "Editar", mostrando o formul√°rio preenchido."""
    st.session_state.show_user_form = True
    st.session_state.editing_user_item = item_data

def close_form_and_rerun():
    """Fecha o formul√°rio e recarrega a p√°gina."""
    st.session_state.show_user_form = False
    st.session_state.editing_user_item = None
    st.rerun()

def handle_save(form_data: dict):
    """Processa o clique no bot√£o 'Salvar' do formul√°rio."""
    login = form_data['login_usuario'].strip()
    nome = form_data['nome_completo'].strip()
    tipo_acesso = form_data['tipo_acesso']
    password = form_data['password']  # N√£o usamos .strip() em senhas

    # Valida√ß√£o
    if not login or not nome:
        st.error("Os campos 'Login' e 'Nome Completo' s√£o obrigat√≥rios.")
        return  # Para a execu√ß√£o aqui e mant√©m o formul√°rio aberto

    is_edit_mode = st.session_state.editing_user_item is not None

    if not is_edit_mode and not password:
        st.error("A 'Senha' √© obrigat√≥ria para novos usu√°rios.")
        return  # Para a execu√ß√£o

    try:
        if is_edit_mode:
            # MODO EDI√á√ÉO: Atualiza o usu√°rio existente
            update_user(login, nome, tipo_acesso, password)
            st.toast(f"Usu√°rio '{login}' atualizado com sucesso!", icon="‚úÖ")
        else:
            # MODO ADI√á√ÉO: Cria um novo usu√°rio
            add_user(login, nome, tipo_acesso, password)
            st.toast(f"Usu√°rio '{login}' criado com sucesso!", icon="üéâ")

        # Se salvou com sucesso, fecha o formul√°rio e recarrega
        close_form_and_rerun()

    except Exception as e:
        # Trata erro de login duplicado (chave √∫nica)
        if "UNIQUE constraint failed" in str(e) or "Duplicate entry" in str(e) or "unique constraint" in str(e):
            st.error(f"Erro: O login '{login}' j√° existe. Tente outro.")
        else:
            st.error(f"Erro ao salvar: {e}")

def handle_delete(item_data: dict):
    """Processa o clique no bot√£o 'Confirmar Exclus√£o'."""
    try:
        login_to_delete = item_data['login_usuario']
        delete_user(login_to_delete)
        st.toast(f"Usu√°rio '{login_to_delete}' exclu√≠do!", icon="üóëÔ∏è")
        st.rerun()  # Recarrega a p√°gina para remover o item da lista
    except Exception as e:
        st.error(f"Erro ao excluir: {e}")

# =============================================================================
# 5. FUN√á√ïES DE RENDERIZA√á√ÉO DA INTERFACE (L√≥gica "View")
# (Estas fun√ß√µes desenham os widgets do Streamlit na tela)
# =============================================================================

def render_form():
    """Desenha o formul√°rio de Adicionar/Editar."""
    is_edit_mode = st.session_state.editing_user_item is not None
    title = "‚úèÔ∏è Editando Usu√°rio" if is_edit_mode else "‚ûï Novo Usu√°rio"
    item = st.session_state.editing_user_item or {}

    with st.container(border=True):
        st.subheader(title)

        with st.form(key="user_form"):
            # Campos do formul√°rio
            login_usuario = st.text_input(
                "Login (ID)",
                value=item.get("login_usuario", ""),
                disabled=is_edit_mode,  # N√£o pode editar login
                help="O login n√£o pode ser alterado ap√≥s a cria√ß√£o."
            )
            nome_completo = st.text_input(
                "Nome Completo",
                value=item.get("nome_completo", "")
            )

            # L√≥gica para achar o √≠ndice padr√£o do selectbox
            default_index = 0
            if is_edit_mode and item.get("tipo_acesso") in PERFIS_DE_ACESSO:
                default_index = PERFIS_DE_ACESSO.index(item.get("tipo_acesso"))

            tipo_acesso = st.selectbox(
                "Perfil de Acesso",
                options=PERFIS_DE_ACESSO,
                index=default_index
            )

            password_help = ("Deixe em branco para manter a senha atual." if is_edit_mode
                             else "Senha obrigat√≥ria para novos usu√°rios.")
            password = st.text_input(
                "Senha" if not is_edit_mode else "Nova Senha",
                type="password",
                help=password_help
            )

            # Bot√µes do formul√°rio
            form_cols = st.columns(2)
            submitted = form_cols[0].form_submit_button("Salvar", type="primary", width='stretch')
            cancelled = form_cols[1].form_submit_button("Cancelar", width='stretch')

            if submitted:
                # Junta os dados do formul√°rio em um dicion√°rio
                form_data = {
                    'login_usuario': login_usuario,
                    'nome_completo': nome_completo,
                    'tipo_acesso': tipo_acesso,
                    'password': password
                }
                # Chama a fun√ß√£o de l√≥gica "handle_save"
                handle_save(form_data)
            if cancelled:
                # Fecha o formul√°rio e recarrega
                close_form_and_rerun()

def render_table():
    """Desenha a tabela com os usu√°rios e os bot√µes de a√ß√£o."""
    st.divider()
    st.subheader("Usu√°rios Cadastrados")

    df_users = get_all_users()
    if df_users.empty and not st.session_state.show_user_form:
        st.info("Nenhum usu√°rio cadastrado. Clique em 'Adicionar' para come√ßar.")
        return

    # Cabe√ßalho da tabela
    header_cols = st.columns([2, 3, 2, 1, 1])
    header_cols[0].markdown("**Login (ID)**")
    header_cols[1].markdown("**Nome Completo**")
    header_cols[2].markdown("**Perfil de Acesso**")
    header_cols[3].markdown("**A√ß√µes**")

    # Linhas da tabela
    for index, row in df_users.iterrows():
        row_data = row.to_dict()
        row_cols = st.columns([2, 3, 2, 1, 1])

        row_cols[0].write(row_data['login_usuario'])
        row_cols[1].write(row_data['nome_completo'])
        row_cols[2].write(row_data['tipo_acesso'])

        # Bot√£o Editar
        row_cols[3].button(
            "‚úèÔ∏è",
            key=f"edit_{row_data['login_usuario']}",
            on_click=show_edit_form,  # Chama a fun√ß√£o de l√≥gica
            args=(row_data,)
        )

        # Bot√£o Excluir (com pop-up de confirma√ß√£o)
        # Note: O popover N√ÉO precisa de 'key'
        popover = row_cols[4].popover("üóëÔ∏è", help=f"Excluir {row_data['login_usuario']}?")
        popover.warning(f"Confirmar exclus√£o de '{row_data['nome_completo']}'?")
        popover.button(
            "Confirmar",
            key=f"del_{row_data['login_usuario']}",
            on_click=handle_delete,  # Chama a fun√ß√£o de l√≥gica
            args=(row_data,)
        )

# =============================================================================
# 6. EXECU√á√ÉO PRINCIPAL DA P√ÅGINA
# (Decide o que mostrar)
# =============================================================================

st.title("üë§ Gest√£o de Usu√°rios")
st.markdown("Crie, edite ou remova usu√°rios do sistema.")

# L√≥gica principal: ou mostra o formul√°rio, ou mostra o bot√£o "Adicionar"
if st.session_state.show_user_form:
    render_form()
else:
    st.button(
        "‚ûï Adicionar Novo Usu√°rio",
        on_click=show_add_form,  # Chama a fun√ß√£o de l√≥gica
        type="primary"
    )

# A tabela √© sempre renderizada
render_table()